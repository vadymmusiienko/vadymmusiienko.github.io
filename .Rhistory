# Graph the data
dataframe |>
ggplot(
aes(Frequency, Mean_Absorbance, color = Publication)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each population in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance"
) +
# Apply the custom theme
custom_theme
# Custom theme
custom_theme <- theme(
panel.background = element_rect(fill = "white", color = "grey"),
panel.grid.minor = element_line(color = "gray80"),
# Axis text and titles
axis.text = element_text(size = 8),
axis.title = element_text(size = 11, colour = "black"),
# Legend
legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.key.size = unit(0.4, "cm"),
legend.text = element_text(size = 9),
legend.key = element_rect(fill = "white", color = "white"),
legend.background = element_rect(
fill = "white",
color = "grey",
size = 0.5
),
legend.title = FALSE,
# Custom title
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
# Custon ticks on x and y axis
axis.ticks = element_line(color = "grey", size = 0.5),
axis.ticks.length = unit(0.2, "cm"),
)
# Graph the data
dataframe |>
ggplot(
aes(Frequency, Mean_Absorbance, color = Publication)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each population in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance"
) +
# Apply the custom theme
custom_theme
# Custom theme
custom_theme <- theme(
panel.background = element_rect(fill = "white", color = "grey"),
panel.grid.minor = element_line(color = "gray80"),
# Axis text and titles
axis.text = element_text(size = 8),
axis.title = element_text(size = 11, colour = "black"),
# Legend
legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.key.size = unit(0.4, "cm"),
legend.text = element_text(size = 9),
legend.key = element_rect(fill = "white", color = "white"),
legend.background = element_rect(
fill = "white",
color = "grey",
size = 0.5
),
legend.title = NULL,
# Custom title
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
# Custon ticks on x and y axis
axis.ticks = element_line(color = "grey", size = 0.5),
axis.ticks.length = unit(0.2, "cm"),
)
# Graph the data
dataframe |>
ggplot(
aes(Frequency, Mean_Absorbance, color = Publication)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each population in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance"
) +
# Apply the custom theme
custom_theme
# Custom theme
custom_theme <- theme(
panel.background = element_rect(fill = "white", color = "grey"),
panel.grid.minor = element_line(color = "gray80"),
# Axis text and titles
axis.text = element_text(size = 8),
axis.title = element_text(size = 11, colour = "black"),
# Legend
legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.key.size = unit(0.4, "cm"),
legend.text = element_text(size = 9),
legend.key = element_rect(fill = "white", color = "white"),
legend.background = element_rect(
fill = "white",
color = "grey",
size = 0.5
),
# Custom title
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
# Custon ticks on x and y axis
axis.ticks = element_line(color = "grey", size = 0.5),
axis.ticks.length = unit(0.2, "cm"),
)
# Graph the data
dataframe |>
ggplot(
aes(Frequency, Mean_Absorbance, color = Publication)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each population in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance"
) +
# Apply the custom theme
custom_theme
# Custom theme
custom_theme <- theme(
panel.background = element_rect(fill = "white", color = "grey"),
panel.grid.minor = element_line(color = "gray80"),
# Axis text and titles
axis.text = element_text(size = 8),
axis.title = element_text(size = 11, colour = "black"),
# Legend
legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.key.size = unit(0.4, "cm"),
legend.text = element_text(size = 9),
#legend.key = element_rect(fill = "white", color = "white"),
legend.background = element_rect(
fill = "white",
color = "grey",
size = 0.5
),
# Custom title
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
# Custon ticks on x and y axis
axis.ticks = element_line(color = "grey", size = 0.5),
axis.ticks.length = unit(0.2, "cm"),
)
# Graph the data
dataframe |>
ggplot(
aes(Frequency, Mean_Absorbance, color = Publication)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each population in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance"
) +
# Apply the custom theme
custom_theme
# Graph the data
dataframe |>
ggplot(
aes(Frequency, Mean_Absorbance, color = Publication)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each population in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance",
color = NULL
) +
# Apply the custom theme
custom_theme
# Custom theme
custom_theme <- theme(
panel.background = element_rect(fill = "white", color = "grey"),
panel.grid.minor = element_line(color = "gray80"),
# Axis text and titles
axis.text = element_text(size = 8),
axis.title = element_text(size = 11, colour = "black"),
# Legend
legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.key.size = unit(0.4, "cm"),
legend.text = element_text(size = 9),
legend.key = element_rect(fill = "white", color = "white"),
legend.background = element_rect(
fill = "white",
color = "grey",
size = 0.5
),
# Title
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
# Ticks on x and y axis
axis.ticks = element_line(color = "grey", size = 0.5),
axis.ticks.length = unit(0.2, "cm")
)
# Graph the data
dataframe |>
ggplot(
aes(Frequency, Mean_Absorbance, color = Publication)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each population in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance",
color = NULL
) +
# Apply the custom theme
custom_theme
# Graph the data
wai_gender |>
ggplot(
aes(Frequency, Mean_absorbance, group = Label, color = Sex)
) +
geom_line(size = 1) +
# Zoom in on the interval of interest
coord_cartesian(xlim = c(200, 8000), ylim = c(0, 1)) +
# Add custom ticks on x-axis
scale_x_continuous(
breaks = c(200, 400, 600, 800, 1000, 2000, 4000, 6000, 8000),
trans = "pseudo_log"
) +
# Add custom ticks on y-axis
scale_y_continuous(
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
) +
# Add the labels
labs(
title = "Mean absorbance from each race in WAI database",
x = "Frequency (Hz)",
y = "Mean absorbance",
color = NULL
) +
# Apply the custom theme
custom_theme
setwd("Work/College/Data Science/vadymmusiienko.github.io/")
# Average time active in the population
active_avr <- activity |> summarize(avr_time_active = mean(total_exercise))
library(tidyverse)
library(lubridate)
# Path to the main data folder (with 22 directories)
data_path <- "data/SleepUsers/"
# Get the list of user folders
user_folders <- list.dirs(path = data_path, full.names = TRUE, recursive = FALSE)
# Function to read Activity.csv file for a user (returns a dataframe)
read_activity_data <- function(user_folder) {
# Access the activity file
activity_file <- file.path(user_folder, "Activity.csv")
# Read the activity file into a dataframe and add a column with user number
activity_df <- read.csv(activity_file) |>
mutate(user = basename(user_folder))
return(activity_df)
}
# Function to read Sleep.csv file for a user (returns a dataframe)
read_sleep_data <- function(user_folder) {
# Access the sleep file
sleep_file <- file.path(user_folder, "Sleep.csv")
# Read the sleep file into the dataframe and add a column with user number
sleep_df <- read.csv(sleep_file) |>
# Select only Sleep Efficiency column
select(Efficiency) |>
mutate(user = basename(user_folder))
return(sleep_df)
}
# Read and combine Activity.csv files
activity_df <- user_folders |>
map(read_activity_data) |> list_rbind()
# Read and combine Sleep.csv files
sleep_df <- user_folders |>
map(read_sleep_data) |>
list_rbind() |>
rename(
efficiency = Efficiency
)
# Calculate average sleep efficiency over the 2 days of the experiment for each user
sleep_df <- sleep_df |>
group_by(user) |>
summarize(avr_sleep_efc = mean(efficiency))
# Select only rows with physical activity (light, medium, heavy)
activity_df <- activity_df |>
rename(
activity = Activity
) |>
filter(activity %in% c(4, 5, 6)) |>
mutate(activity = case_when(
activity == 4 ~ "light",
activity == 5 ~ "medium",
activity == 6 ~ "heavy",
),
# Convert start and end times to time objects (lubridate)
Start = hm(Start),
End = hm(End))
# Add a duration of the activity column (in minutes) and delete End and Start columns
activity_df <- activity_df |>
mutate(duration = as.numeric(End - Start) / 60) |>
select(-c("End", "Start"))
# Calculate total physical activity duration per user over 2 days and pivot wider
activity_df <- activity_df |>
group_by(user, activity) |>
summarise(total_duration = sum(duration, na.rm = TRUE)) |>
ungroup() |>
pivot_wider(names_from = activity, values_from = total_duration,
values_fill = 0)
# View first 5 rows
head(activity_df, n = 5)
head(sleep_df, n = 5)
# Merge activity and sleep dataframes based on user
merged_data <- activity_df |> inner_join(sleep_df, by = c("user"))
# View the first 5 rows
merged_data
# Multipliers for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Create a dataframe with total activity (light, medium, and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy * heavy_multiplier + medium * medium_multiplier + light * light_multiplier,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup()
# View the result
activity
# Average time active in the population
active_avr <- activity |> summarize(avr_time_active = mean(total_exercise))
active_avr
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View first 5 rows
head(activity, n = 5)
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View first 5 rows
head(activity, n = 5)
# Average time active in the population
active_avr <- activity |> summarize(avr_time_active = mean(total_exercise))
# See the average time active for a person in the population
active_avr
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View first 5 rows
head(activity, n = 5)
# View first 5 rows
head(activity, n = 5)
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View first 5 rows
head(activity, n = 5)
# View first 5 rows
head(activity, n = 10)
# View first 5 rows
activity
# Average time active in the population
active_avr <- activity |> summarize(avr_time_active = mean(total_exercise)) |>
as.numeric()
# See the average time active for a person in the population
active_avr
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View first 5 rows
activity
head(activity, n = 10)
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View first 5 rows
activity
head(activity, n = 5)
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View first 5 rows
head(activity, n = 5)
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active",
y = "Sleep Efficiency",
title = "Effect of Physical Activity on Sleep Quality"
) +
theme_minimal()
# Test the function
map(1:10, perm_data, data = activity) |>
list_rbind() |> head(n = 5)
# Function to generate a null sampling distribution
perm_data <- function(rep, data) {
data |>
mutate(efc_perm = sample(avr_sleep_efc, replace = FALSE)) |>
group_by(active) |>
summarize(
obs_avr = mean(avr_sleep_efc),
obs_med = median(avr_sleep_efc),
perm_avr = mean(efc_perm),
perm_med = median(efc_perm)
) |>
summarize(
obs_avr_diff = diff(obs_avr),
obs_med_diff = diff(obs_med),
perm_avr_diff = diff(perm_avr),
perm_med_diff = diff(perm_med),
rep = rep
)
}
# Test the function
map(1:10, perm_data, data = activity) |>
list_rbind() |> head(n = 5)
# Test the function
map(1:5, perm_data, data = activity) |>
list_rbind()
library(tidyverse)
library(ggrepel)
# Load the data
wine_data <- read_csv("data/winemag-data_first150k.csv")
head(wine_data, n = 10)
#| fig-height: 6
#| fig-width: 12
