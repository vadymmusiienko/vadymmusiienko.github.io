y = "Sleep efficiency",
title = "Effect of physical activity on sleep quality"
) +
theme_minimal()
# Multiplier for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Minimum minutes of physical activity to be counted as "active"
active_min <- 100
# Create a dataframe with total activity (light, medium and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy + medium + light,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup() |>
# Add a logical column that represents whether a user was active or not
mutate(active = ifelse(total_exercise > active_min, "Yes", "No"))
# See the result
activity
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active for more than 50 mins a day",
y = "Sleep efficiency",
title = "Effect of physical activity on sleep quality"
) +
theme_minimal()
# Minimum minutes of physical activity to be counted as "active"
active_min <- 150
# Multiplier for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Minimum minutes of physical activity to be counted as "active"
active_min <- 150
# Create a dataframe with total activity (light, medium and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy + medium + light,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup() |>
# Add a logical column that represents whether a user was active or not
mutate(active = ifelse(total_exercise > active_min, "Yes", "No"))
# See the result
activity
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active for more than 50 mins a day",
y = "Sleep efficiency",
title = "Effect of physical activity on sleep quality"
) +
theme_minimal()
# Multiplier for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Minimum minutes of physical activity to be counted as "active"
active_min <- 150
# Create a dataframe with total activity (light, medium and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy * heavy_multiplier + medium * medium_multiplier
+ light * light_multiplier,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup() |>
# Add a logical column that represents whether a user was active or not
mutate(active = ifelse(total_exercise > active_min, "Yes", "No"))
# See the result
activity
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active for more than 50 mins a day",
y = "Sleep efficiency",
title = "Effect of physical activity on sleep quality"
) +
theme_minimal()
# Multiplier for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Minimum minutes of physical activity to be counted as "active"
active_min <- 300
# Create a dataframe with total activity (light, medium and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy * heavy_multiplier + medium * medium_multiplier
+ light * light_multiplier,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup() |>
# Add a logical column that represents whether a user was active or not
mutate(active = ifelse(total_exercise > active_min, "Yes", "No"))
# See the result
activity
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active for more than 50 mins a day",
y = "Sleep efficiency",
title = "Effect of physical activity on sleep quality"
) +
theme_minimal()
# Multiplier for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Minimum minutes of physical activity to be counted as "active"
active_min <- 300
# Create a dataframe with total activity (light, medium and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy * heavy_multiplier + medium * medium_multiplier
+ light * light_multiplier,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup()
# See the result
activity
activity |> summarize(avr_time_active = mean(total_exercise))
# Average time active in the population
activity |> summarize(avr_time_active = mean(total_exercise))
active
# Average time active in the population
activity |> summarize(avr_time_active = mean(total_exercise))
# Minimum minutes of physical activity to be counted as "active"
active_avr <- 330
# Add a logical column that represents whether a user was active or not
active <- active |>
mutate(active = ifelse(total_exercise > active_min, "Yes", "No"))
# Minimum minutes of physical activity to be counted as "active"
active_avr <- 330
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
active
# Minimum minutes of physical activity to be counted as "active"
active_avr <- 330
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
activity
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active for more than 50 mins a day",
y = "Sleep efficiency",
title = "Effect of physical activity on sleep quality"
) +
theme_minimal()
# Calculate the mean and median of active and non-active groups of people
activity |> group_by(active) |>
summarize(avr_quality = mean(avr_sleep_efc),
med_quality = median(avr_sleep_efc)
)
# Difference in means and medians
activity |> group_by(active) |>
summarize(avr_quality = mean(avr_sleep_efc),
med_quality = median(avr_sleep_efc)
) |>
summarize(
ave_diff = diff(avr_quality),
med_diff = diff(med_quality)
)
# Function to generate a null sampling distribution
perm_data <- function(rep, data) {
data |>
mutate(efc_perm = sample(avr_sleep_efc, replace = FALSE)) |>
group_by(active) |>
summarize(
obs_avr = mean(avr_sleep_efc),
obs_med = median(avr_sleep_efc),
perm_avr = mean(efc_perm),
perm_med = median(efc_perm)
) |>
summarize(
obs_avr_diff = diff(obs_avr),
obs_med_diff = diff(obs_med),
perm_avr_diff = diff(perm_avr),
perm_med_diff = diff(perm_med),
rep = rep
)
}
# Test the function
map(1:10, perm_data, data = activity) |>
list_rbind()
set.seed(47)
perm_stats <- map(1:500, perm_data, data = activity) |> list_rbind()
perm_stats |>
ggplot(aes(perm_avr_diff)) +
geom_histogram() +
geom_vline(aes(xintercept = obs_avr_diff), color = "red")
# Visualize the null sampling distribution (median)
perm_stats |>
ggplot(aes(x = perm_med_diff)) +
geom_histogram() +
geom_vline(aes(xintercept = obs_med_diff), color = "red")
perm_stats |>
summarize(p_val_avr = mean(perm_avr_diff > obs_avr_diff),
p_val_med = mean(perm_med_diff > obs_med_diff))
perm_stats |>
summarize(p_val_avr = mean(perm_avr_diff > obs_avr_diff),
p_val_med = mean(perm_med_diff > obs_med_diff))
# Path to the main data folder
data_path <- "data/SleepUsers/"
# Get the list of user folders
user_folders <- list.dirs(path = data_path, full.names = TRUE, recursive = FALSE)
# Function to read Activity.csv file for a user (returns a dataframe)
read_activity_data <- function(user_folder) {
# Access the activity file
activity_file <- file.path(user_folder, "Activity.csv")
# Read the activity file into a dataframe and add a column with user number
activity_df <- read.csv(activity_file) |>
mutate(user = basename(user_folder))
return(activity_df)
}
# Function to read Sleep.csv file for a user (returns a dataframe)
read_sleep_data <- function(user_folder) {
# Access the sleep file
sleep_file <- file.path(user_folder, "Sleep.csv")
# Read the sleep file into the dataframe and add a column with user number
sleep_df <- read.csv(sleep_file) |>
# Select only Sleep efficiency column
select(Efficiency) |>
mutate(user = basename(user_folder))
return(sleep_df)
}
# Read and combine Activity.csv files
activity_df <- user_folders |>
map(read_activity_data) |> list_rbind()
# Read and combine Sleep.csv files
sleep_df <- user_folders |>
map(read_sleep_data) |>
list_rbind() |>
rename(
efficiency = Efficiency
)
# Calculate average sleep efficiency throughout 2 days of the experiment for each user
sleep_df <- sleep_df |>
group_by(user) |>
summarize(avr_sleep_efc = mean(efficiency))
# Select only rows with physical activity (light, medium, heavy)
activity_df <- activity_df |>
rename(
activity = Activity
) |>
filter(activity %in% c(4, 5, 6)) |>
mutate(activity = case_when
(
activity == 4 ~ "light",
activity == 5 ~ "medium",
activity == 6 ~ "heavy",
),
# Make start and end times time objects (lubridate)
Start = hm(Start),
End = hm(End))
# Add a duration of the activity column (in minutes) and delete End and Start columns
activity_df <- activity_df |>
mutate(duration = as.numeric(End - Start) / 60) |>
select(-c("End", "Start"))
# Calculate total physical activity duration per user throughout 2 days and pivot wider
activity_df <- activity_df |>
group_by(user, activity) |>
summarise(total_duration = sum(duration, na.rm = TRUE)) |>
ungroup() |>
pivot_wider(names_from = activity, values_from = total_duration,
values_fill = 0)
# See the result
activity_df
sleep_df
# Merge activity and sleep dataframes based on user
merged_data <- activity_df |> inner_join(sleep_df, by = c("user"))
# See the result
merged_data
# Multiplier for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Create a dataframe with total activity (light, medium and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy * heavy_multiplier + medium * medium_multiplier
+ light * light_multiplier,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup()
# See the result
activity
# Average time active in the population
activity |> summarize(avr_time_active = mean(total_exercise))
# Minimum minutes of physical activity to be counted as "active"
active_avr <- 330
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# See the result
activity
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active",
y = "Sleep efficiency",
title = "Effect of physical activity on sleep quality"
) +
theme_minimal()
# Calculate the mean and median of active and non-active groups of people
activity |> group_by(active) |>
summarize(avr_quality = mean(avr_sleep_efc),
med_quality = median(avr_sleep_efc)
)
# Difference in means and medians
activity |> group_by(active) |>
summarize(avr_quality = mean(avr_sleep_efc),
med_quality = median(avr_sleep_efc)
) |>
summarize(
ave_diff = diff(avr_quality),
med_diff = diff(med_quality)
)
# Function to generate a null sampling distribution
perm_data <- function(rep, data) {
data |>
mutate(efc_perm = sample(avr_sleep_efc, replace = FALSE)) |>
group_by(active) |>
summarize(
obs_avr = mean(avr_sleep_efc),
obs_med = median(avr_sleep_efc),
perm_avr = mean(efc_perm),
perm_med = median(efc_perm)
) |>
summarize(
obs_avr_diff = diff(obs_avr),
obs_med_diff = diff(obs_med),
perm_avr_diff = diff(perm_avr),
perm_med_diff = diff(perm_med),
rep = rep
)
}
# Test the function
map(1:10, perm_data, data = activity) |>
list_rbind()
# Path to the main data folder
data_path <- "data/SleepUsers/"
# Get the list of user folders
user_folders <- list.dirs(path = data_path, full.names = TRUE, recursive = FALSE)
# Function to read Activity.csv file for a user (returns a dataframe)
read_activity_data <- function(user_folder) {
# Access the activity file
activity_file <- file.path(user_folder, "Activity.csv")
# Read the activity file into a dataframe and add a column with user number
activity_df <- read.csv(activity_file) |>
mutate(user = basename(user_folder))
return(activity_df)
}
# Function to read Sleep.csv file for a user (returns a dataframe)
read_sleep_data <- function(user_folder) {
# Access the sleep file
sleep_file <- file.path(user_folder, "Sleep.csv")
# Read the sleep file into the dataframe and add a column with user number
sleep_df <- read.csv(sleep_file) |>
# Select only Sleep Efficiency column
select(Efficiency) |>
mutate(user = basename(user_folder))
return(sleep_df)
}
# Read and combine Activity.csv files
activity_df <- user_folders |>
map(read_activity_data) |> list_rbind()
# Read and combine Sleep.csv files
sleep_df <- user_folders |>
map(read_sleep_data) |>
list_rbind() |>
rename(
efficiency = Efficiency
)
# Calculate average sleep efficiency over the 2 days of the experiment for each user
sleep_df <- sleep_df |>
group_by(user) |>
summarize(avr_sleep_efc = mean(efficiency))
# Select only rows with physical activity (light, medium, heavy)
activity_df <- activity_df |>
rename(
activity = Activity
) |>
filter(activity %in% c(4, 5, 6)) |>
mutate(activity = case_when(
activity == 4 ~ "light",
activity == 5 ~ "medium",
activity == 6 ~ "heavy",
),
# Convert start and end times to time objects (lubridate)
Start = hm(Start),
End = hm(End))
# Add a duration of the activity column (in minutes) and delete End and Start columns
activity_df <- activity_df |>
mutate(duration = as.numeric(End - Start) / 60) |>
select(-c("End", "Start"))
# Calculate total physical activity duration per user over 2 days and pivot wider
activity_df <- activity_df |>
group_by(user, activity) |>
summarise(total_duration = sum(duration, na.rm = TRUE)) |>
ungroup() |>
pivot_wider(names_from = activity, values_from = total_duration,
values_fill = 0)
# View the results
activity_df
sleep_df
# Merge activity and sleep dataframes based on user
merged_data <- activity_df |> inner_join(sleep_df, by = c("user"))
# View the result
merged_data
# Multipliers for each activity
heavy_multiplier <- 3
medium_multiplier <- 2
light_multiplier <- 1
# Create a dataframe with total activity (light, medium, and heavy) for each user
activity <- merged_data |> group_by(user) |>
summarize(
total_exercise = heavy * heavy_multiplier + medium * medium_multiplier + light * light_multiplier,
avr_sleep_efc = avr_sleep_efc
) |>
ungroup()
# View the result
activity
# Minimum minutes of physical activity to be counted as "active"
active_avr <- 330
# Add a logical column that represents whether a user was active or not
activity <- activity |>
mutate(active = ifelse(total_exercise > active_avr, "Yes", "No"))
# View the result
activity
activity |>
ggplot(aes(x = active, y = avr_sleep_efc)) +
geom_boxplot() +
labs(
x = "Active",
y = "Sleep Efficiency",
title = "Effect of Physical Activity on Sleep Quality"
) +
theme_minimal()
# Calculate the mean and median of active and non-active groups
activity |> group_by(active) |>
summarize(avr_quality = mean(avr_sleep_efc),
med_quality = median(avr_sleep_efc)
)
# Difference in means and medians
activity |> group_by(active) |>
summarize(avr_quality = mean(avr_sleep_efc),
med_quality = median(avr_sleep_efc)
) |>
summarize(
ave_diff = diff(avr_quality),
med_diff = diff(med_quality)
)
# Function to generate a null sampling distribution
perm_data <- function(rep, data) {
data |>
mutate(efc_perm = sample(avr_sleep_efc, replace = FALSE)) |>
group_by(active) |>
summarize(
obs_avr = mean(avr_sleep_efc),
obs_med = median(avr_sleep_efc),
perm_avr = mean(efc_perm),
perm_med = median(efc_perm)
) |>
summarize(
obs_avr_diff = diff(obs_avr),
obs_med_diff = diff(obs_med),
perm_avr_diff = diff(perm_avr),
perm_med_diff = diff(perm_med),
rep = rep
)
}
# Test the function
map(1:10, perm_data, data = activity) |>
list_rbind()
set.seed(47)
perm_stats <- map(1:500, perm_data, data = activity) |> list_rbind()
perm_stats |>
ggplot(aes(perm_avr_diff)) +
geom_histogram() +
geom_vline(aes(xintercept = obs_avr_diff), color = "red") +
labs(
x = "Permuted Average Difference",
y = "Frequency",
title = "Null Distribution of Average Differences"
) +
theme_minimal()
perm_stats |>
ggplot(aes(x = perm_med_diff)) +
geom_histogram() +
geom_vline(aes(xintercept = obs_med_diff), color = "red") +
labs(
x = "Permuted Median Difference",
y = "Frequency",
title = "Null Distribution of Median Differences"
) +
theme_minimal()
perm_stats |>
summarize(p_val_avr = mean(perm_avr_diff > obs_avr_diff),
p_val_med = mean(perm_med_diff > obs_med_diff))
